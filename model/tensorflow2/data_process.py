import xml.etree.ElementTree as ET
import pickle, re, sys, os
import numpy as np
import nltk
from gensim.models import word2vec
import time

homepath='D:/Code/pycharm/Event-Extraction/'
acepath=homepath+'ace05/data/English/'

def read_file(xml_path, text_path, event_type):
    apf_tree = ET.parse(xml_path)
    root = apf_tree.getroot()

    event_start = {}
    event_end = {}

    event_ident = {}
    event_map = {}
    event = dict()

    for events in root.iter("event"):
        ev_type = events.attrib["TYPE"] + "_" + events.attrib["SUBTYPE"]
        if ev_type not in event_type:
            event_type.append(ev_type)
        for mention in events.iter("event_mention"):
            ev_id = mention.attrib["ID"]
            anchor = mention.find("anchor")
            for charseq in anchor:
                start = int(charseq.attrib["START"])
                end = int(charseq.attrib["END"]) + 1
                text = re.sub(r"\n", r"", charseq.text)
                event_tupple = (ev_type, start, end, text)
                if event_tupple in event_ident:
                    sys.stderr.write("dulicapte event {}\n".format(ev_id))
                    event_map[ev_id] = event_ident[event_tupple]
                    continue
                event_ident[event_tupple] = ev_id
                event[ev_id] = [ev_id, ev_type, start, end, text]
                event_start[start] = ev_id
                event_end[end] = ev_id

    doc = open(text_path).read()
    doc = re.sub(r"<[^>]+>", r"", doc)
    doc = re.sub(r"(\S+)\n(\S[^:])", r"\1 \2", doc)
    offset = 0
    size = len(doc)
    try:
        header, _, finish = doc.split(r"\n\n\n\n")
        current = len(header) + 4
        end = len(doc) - len(finish)
    except:
        end = len(doc)
        current = 0
    regions = []
    tokens = []
    anchors = []
    check= 0
    for i in range(size):
        if i in event_start:
            inc = 0
            new = clean_str(doc[current:i])
            regions.append(new)
            tokens += new.split()
            check = 1
            anchors += [0 for _ in range(len(new.split()))]
            inc = 0
            current = i
            ent = event_start[i]
            event[ent][2] += offset + inc
        if i in event_end:
            ent = event_end[i]
            event[ent][3] += offset
            new = clean_str(doc[event[ent][2] : event[ent][3]])
            regions.append(new)
            tokens += [new]
            anchors += [event_type.index(event[ent][1])]
            offset += inc
            current = event[ent][3]
    new = clean_str(doc[current : end])
    regions.append(new)
    tokens += new.split()
    anchors += [0 for _ in range(len(new.split()))]
    doc = "".join(regions)
    if len(tokens) == 0:
        print(doc)
        print(text_path)
    for e in  event.values():
        if "\n" in doc[int(e[2]) : int(e[3])]:
            l = []
            l.append(doc[0 : int(e[2])])
            l.append(doc[int(e[2]) : int(e[3])].replace("\n", " "))
            l.append(doc[int(e[3]) :])
            doc = "".join(l)

    return tokens, anchors

def encode_corpus(flag):
    if flag=='train':
        doclist_train=homepath+'/ace05/split1.0/new_filelist_ACE_training.txt'
        doclist_train_f=[acepath+i.replace('\n','') for i in open(doclist_train,'r')]
        return doclist_train_f
    if flag=='test':
        doclist_train=homepath+'/ace05/split1.0/new_filelist_ACE_test.txt'
        doclist_train_f=[acepath+i.replace('\n','') for i in open(doclist_train,'r')]
        return doclist_train_f
    if flag=='dev':
        doclist_train=homepath+'/ace05/split1.0/new_filelist_ACE_dev.txt'
        doclist_train_f=[acepath+i.replace('\n','') for i in open(doclist_train,'r')]
        return doclist_train_f

def get_apf_info(test_tokens,test_anchors,event_type):
    trigger=[]
    length=len(test_tokens)
    for i in range(length):
        token=test_tokens[i]
        anchor=test_anchors[i]
        if anchor!=0:
            trigger.append(token)
        # token_len=len(token)
        # for j in range(token_len):
        #     if anchor[j]!=0:
        #         trigger.append(token[j]+":"+event_type[anchor[j]])
    return trigger


def read_corpus(event_type,flag):
    count = 0
    file_list = encode_corpus(flag)
    tokens, anchors = [], []
    for file_path in file_list:
        tok, anc = read_file(file_path + ".apf.xml", file_path + ".sgm", event_type)
        # print(file_path)
        # print(get_apf_info(tok,anc,event_type))
        count += 1
        tokens.append(tok)
        anchors.append(anc)
    #print(count, len(event_type))
    print(event_type)
    return tokens, anchors

def clean_str(string, TREC=False):
    """
    Tokenization/string cleaning for all datasets except for SST.
    Every dataset is lower cased except for TREC
    """

    string = re.sub(r"[^A-Za-z0-9(),.!?\'\`]", " ", string)
    string = re.sub(r"\'m", r" 'm", string)
    string = re.sub(r"\'s", " \'s", string)
    string = re.sub(r"\'ve", " \'ve", string)
    string = re.sub(r"n\'t", " n\'t", string)
    string = re.sub(r"\'re", " \'re", string)
    string = re.sub(r"\'d", " \'d", string)
    string = re.sub(r"\'ll", " \'ll", string)
    string = re.sub(r"\.", " <dot> ", string)
    string = re.sub(r"\,", r" , ", string)
    string = re.sub(r"!", " ! ", string)
    string = re.sub(r"\(", " ( ", string)
    string = re.sub(r"\)", " ) ", string)
    string = re.sub(r"\?", " ? ", string)
    string = re.sub(r"\s{2,}", " ", string)
    # print(string)
    return string.strip() if TREC else string.strip().lower()


def get_word2vec():
    word2vec_file=homepath+'/ace05/word2vec/wordvector'
    wordlist_file=homepath+'/ace05/word2vec/wordlist'

    wordvec={}
    word2vec_f=open(word2vec_file,'r')
    wordlist_f=open(wordlist_file,'r')
    word_len=19488
    for line in range(word_len):
        word=wordlist_f.readline().strip()
        vec=word2vec_f.readline().strip()
        temp=vec.split(',')
        temp = map(float, temp)
        vec_list = []
        for i in temp:
            vec_list.append(i)
        wordvec[word]=vec_list
    return wordvec


def list2vec(tokens,anchors,phrase_posi_dict):
    vec_dict=get_word2vec()

    X=[]
    Y=[]
    W=[]

    sen_list=[]     #存储句子向量
    label_list=[]
    sen_word_list=[]

    length=len(tokens)
    assert len(tokens)==len(anchors), '句子数目不相等'
    for i in range(length):
        token=tokens[i]
        anchor=anchors[i]
        assert len(token)==len(anchor), '句子数目不相等'
        for j in range(len(token)):
            #如果是句号，结束符
            if "<dot>" in token[j]:
                if len(sen_list)>=5:
                    X.append(sen_list)
                    Y.append(label_list)
                    W.append(sen_word_list)
                sen_list=[]
                label_list=[]
                sen_word_list=[]

            if vec_dict.get(token[j]) is not None:
                sen_list.append(vec_dict.get(token[j]))
                sen_word_list.append(token[j])
                a = [0.0 for x in range(0, 34)]
                a[anchor[j]] = 1.0
                label_list.append(a)
            else:
                trigger_tmp3=token[j].replace('\n', ' ')
                if ' ' in token[j]:
                    if trigger_tmp3 in phrase_posi_dict.keys():
                        new_trigger=trigger_tmp3.split(' ')[int(phrase_posi_dict[trigger_tmp3])-1]
                        sen_list.append(vec_dict.get(new_trigger))
                        sen_word_list.append(new_trigger)
                        a = [0.0 for x in range(0, 34)]
                        a[anchor[j]] = 1.0
                        label_list.append(a)

                # sen_list.append(np.random.uniform(-0.25, 0.25, 300).tolist())
                # sen_word_list.append(token[j])
                # a = [0.0 for x in range(0, 34)]
                # a[0] = 1.0
                # label_list.append(a)

    return X,Y,W


"""
获取短语取哪个词作为触发词
"""
def get_phrase_posi(ss):
    strlist=ss.split(' ')
    k=len(strlist)
    s=strlist[0]
    for i in range(1,k-1):
        s=s+' '+strlist[i]
    return s,strlist[k-1]


def pre_data():

    phrase_posi_file=homepath+'/ace05/word2vec/phrase_posi.txt'
    phrase_posi_dict={}
    for i in open(phrase_posi_file, 'r'):
        a,b=get_phrase_posi(i.replace('\n', ''))
        phrase_posi_dict[a]=b

    event_type = [None]
    train_tokens, train_anchors=read_corpus(event_type,'train')
    test_tokens, test_anchors=read_corpus(event_type,'test')
    dev_tokens, dev_anchors=read_corpus(event_type,'dev')

    X_train,Y_train,W_train=list2vec(train_tokens,train_anchors,phrase_posi_dict)
    X_test,Y_test,W_test=list2vec(test_tokens,test_anchors,phrase_posi_dict)
    X_dev,Y_dev,W_dev=list2vec(dev_tokens,dev_anchors,phrase_posi_dict)

    data=X_train,Y_train,W_train,X_test,Y_test,W_test,X_dev,Y_dev,W_dev
    f=open(homepath+'/model/tensorflow2/data/2/train_data34.data','wb')
    pickle.dump(data,f)

# 规范句子长度
def padding_mask(x, y,w,max_len):
    X_train=[]
    Y_train=[]
    W_train=[]
    x_zero_list=[0.0 for i in range(300)]
    y_zero_list=[0.0 for i in range(34)]
    y_zero_list[0]=1.0
    unknown='unknow_word'
    for i, (x, y) in enumerate(zip(x, y)):
        if max_len>len(x):
            for j in range(max_len-len(x)):
                x.append(x_zero_list)
                y.append(y_zero_list)
                w.append(unknown)
        else:
            x=x[:max_len]
            y=y[:max_len]
            w=w[:max_len]
        X_train.append(x)
        Y_train.append(y)
        W_train.append(w)
    return X_train,Y_train,W_train

#[None, 'Movement_Transport', 'Personnel_Elect', 'Personnel_Start-Position', 'Personnel_Nominate', 'Conflict_Attack', 'Personnel_End-Position', 'Contact_Meet', 'Life_Marry', 'Contact_Phone-Write', 'Transaction_Transfer-Money', 'Justice_Sue', 'Conflict_Demonstrate', 'Business_End-Org', 'Life_Injure', 'Life_Die', 'Justice_Arrest-Jail', 'Transaction_Transfer-Ownership', 'Business_Start-Org', 'Justice_Execute', 'Justice_Trial-Hearing', 'Justice_Sentence', 'Life_Be-Born', 'Justice_Charge-Indict', 'Justice_Convict', 'Business_Declare-Bankruptcy', 'Justice_Release-Parole', 'Justice_Fine', 'Justice_Pardon', 'Justice_Appeal', 'Business_Merge-Org', 'Justice_Extradite', 'Life_Divorce', 'Justice_Acquit']
#sen_list.append(np.random.uniform(-0.25, 0.25, 300).tolist())

'''
规范句子长度
补零的词汇用np.random.uniform(-0.25, 0.25, 300).tolist()代替
'''
def padding_mask_random(x, y,w,max_len):
    X_train=[]
    Y_train=[]
    W_train=[]
    L_train=[]

    x_zero_list=np.random.uniform(-0.25, 0.25, 300).tolist()
    y_zero_list=[0.0 for i in range(34)]
    y_zero_list[0]=1.0
    unknown='unknow_word'
    for i, (x, y) in enumerate(zip(x, y)):
        sen_len=len(x)
        if max_len>len(x):
            for j in range(max_len-len(x)):
                x.append(x_zero_list)
                y.append(y_zero_list)
                w.append(unknown)
        else:
            sen_len=max_len
            x=x[:max_len]
            y=y[:max_len]
            w=w[:max_len]
        L_train.append(sen_len)
        X_train.append(x)
        Y_train.append(y)
        W_train.append(w)
    return X_train,Y_train,W_train,L_train


# 规范句子长度
def padding_mask_full(x, y,w,max_len):
    X_train=[]
    Y_train=[]
    W_train=[]
    x_zero_list=[0.0 for i in range(300)]
    y_zero_list=[0.0 for i in range(34)]
    y_zero_list[0]=1.0
    unknown='unknow_word'
    for i, (x, y) in enumerate(zip(x, y)):
        x_len=len(x)
        iter_num=int(x_len/max_len)
        if iter_num==0:
            for j in range(max_len-len(x)):
                x.append(x_zero_list)
                y.append(y_zero_list)
                w.append(unknown)
            X_train.append(x)
            Y_train.append(y)
            W_train.append(w)
        else:
            for j in range(iter_num):
                if (j+2)*max_len>x_len:
                    a=x[(j+1)*max_len:x_len]
                    b=y[(j+1)*max_len:x_len]
                    c=w[(j+1)*max_len:x_len]
                    for k in range((j+2)*max_len-x_len):
                        a.append(x_zero_list)
                        b.append(y_zero_list)
                        c.append(unknown)
                    X_train.append(a)
                    Y_train.append(b)
                    W_train.append(c)
                else:
                    X_train.append(x[j*max_len:(j+1)*max_len])
                    Y_train.append(y[j*max_len:(j+1)*max_len])
                    W_train.append(w[j*max_len:(j+1)*max_len])
                    # print(len(w[j*max_len:(j+1)*max_len]))


    return X_train,Y_train,W_train

def pos_tag_add():
    data_f = open('./data/2/train_data_form34.data', 'rb')
    X_train,Y_train,W_train,X_test,Y_test,W_test,X_dev,Y_dev,W_dev = pickle.load(data_f)
    data_f.close()

    pos_tag=[]
    word_list=[]
    for sentence in W_test:
        for word in sentence:
            # tag=nltk.pos_tag(word)[0][1]
            word_list.append(word)
            # if tag not in pos_tag:
            #     pos_tag.append(tag)
    # print(word_list)
    # print(nltk.pos_tag(word_list))
    # print(pos_tag)


def get_posi():
    data_f = open('./data/2/train_data_form34.data', 'rb')
    X_train,Y_train,W_train,X_test,Y_test,W_test,X_dev,Y_dev,W_dev = pickle.load(data_f)
    data_f.close()
    posi=[]
    for sentence in X_train:
        for i in range(len(sentence)):
            word=sentence[i]
            if word[0]==0:
                posi.append(i)
                break
            else:
                if i==59:
                    print(i)
                    posi.append(i)

    for sentence in X_test:
        for i in range(len(sentence)):
            word = sentence[i]
            if word[0] == 0:
                posi.append(i)
                break
            else:
                if i==59:
                    print(i)
                    posi.append(i)

    for sentence in X_dev:
        for i in range(len(sentence)):
            word = sentence[i]
            if word[0] == 0:
                posi.append(i)
                break
            else:
                if i==59:
                    print(i)
                    posi.append(i)

    posi_f = open('./data/2/posi.txt', 'w')
    for i in posi:
        for j in range(i+1):
            posi_f.write(str(j)+' ')
        posi_f.write('\n')


def posi_embedding():
    print(time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(time.time())))

    sentences =word2vec.Text8Corpus("./data/2/posi.txt")
    model =word2vec.Word2Vec(sentences, size=5,min_count=1,iter=15)
    model.save_word2vec_format("./data/2/posi_embed.bin", binary=True)

    print(time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(time.time())))


def add_posi():

    data_f = open('./data/2/train_data_form34.data', 'rb')
    X_train,Y_train,W_train,X_test,Y_test,W_test,X_dev,Y_dev,W_dev = pickle.load(data_f)
    data_f.close()

    posi_model =word2vec.Word2Vec.load_word2vec_format("./data/2/posi_embed.bin",binary=True)

    zero_posi=[0.0 for i in range(5)]

    X_train_addposi=[]
    word=[]
    sen_add_posi=[]
    for sentence in X_train:
        for i in range(len(sentence)):
            word.extend(sentence[i])
            if word[0]==0:
                word.extend(zero_posi)
            else:
                word.extend(posi_model[str(i)])
            sen_add_posi.append(word)
            word=[]
        X_train_addposi.append(sen_add_posi)
        sen_add_posi=[]

    X_test_addposi=[]
    word=[]
    sen_add_posi=[]
    for sentence in X_test:
        for i in range(len(sentence)):
            word.extend(sentence[i])
            if word[0]==0:
                word.extend(zero_posi)
            else:
                word.extend(posi_model[str(i)])
            sen_add_posi.append(word)
            word=[]
        X_test_addposi.append(sen_add_posi)
        sen_add_posi=[]


    X_dev_addposi=[]
    word=[]
    sen_add_posi=[]
    for sentence in X_dev:
        for i in range(len(sentence)):
            word.extend(sentence[i])
            if word[0]==0:
                word.extend(zero_posi)
            else:
                word.extend(posi_model[str(i)])
            sen_add_posi.append(word)
            word=[]
        X_dev_addposi.append(sen_add_posi)
        sen_add_posi=[]

    data=X_train_addposi,Y_train,W_train,X_test_addposi,Y_test,W_test,X_dev_addposi,Y_dev,W_dev
    f=open('./data/2/train_data_posi_form34.data','wb')
    pickle.dump(data,f)

    print(np.array(X_train).shape)
    print(np.array(Y_train).shape)
    print(np.array(W_train).shape)
    print(np.array(X_test).shape)
    print(np.array(Y_test).shape)
    print(np.array(W_test).shape)
    print(np.array(X_dev).shape)
    print(np.array(Y_dev).shape)
    print(np.array(W_dev).shape)
    print('---------------------------------------')

    print(np.array(X_train_addposi).shape)
    print(np.array(Y_train).shape)
    print(np.array(W_train).shape)
    print(np.array(X_test_addposi).shape)
    print(np.array(Y_test).shape)
    print(np.array(W_test).shape)
    print(np.array(X_dev_addposi).shape)
    print(np.array(Y_dev).shape)
    print(np.array(W_dev).shape)


if __name__ == "__main__":
    # a=[-0.166105, -0.718234, 0.35836, 1.916836, -2.141811, 2.149823, 1.894258, 0.260348, -0.553771, -0.259591, 2.688239, 0.466311, -0.340876, -0.215523, -0.454911, -1.003361, -0.426934, 0.946226, -0.035711, -2.084579, -1.167344, 0.23873, 0.30529, 0.964207, -1.834918, -2.870326, 0.473587, 0.383109, -2.017712, 1.373989, -0.704189, -0.289877, 0.96271, -1.473228, 2.33379, -0.452081, 0.119263, -1.691989, 0.685733, 0.296445, -0.076387, -0.755968, 0.360935, 2.059949, -0.418001, -0.302781, 0.051731, 0.409249, 1.770462, -0.371251, 0.134467, 0.715098, -0.7499, -0.507971, 0.043081, 0.748779, -0.109705, -0.241466, -0.60324, -0.959918, 1.996119, 0.763904, -0.652239, -1.234657, -2.493682, -0.075348, -0.362218, -1.022702, 0.348534, 2.30478, 1.123199, 0.843742, 1.68925, -2.340256, -2.191819, 0.26226, -0.79413, 0.08703, -2.134478, 0.263647, -1.58875, 0.998018, 0.934485, -0.918908, -0.489818, 0.18149, -0.793443, 0.363129, -1.356314, -0.176167, -0.762521, -0.102684, 1.815612, -0.191935, -1.215782, -1.212196, -0.183281, -2.110187, 1.005993, -0.406029, 0.000223, -1.399298, 0.119121, 0.682664, 1.418079, 0.509162, -0.294483, -0.171087, 1.65435, 0.05952, -0.045804, -0.89034, -0.302717, 0.031454, 1.76034, 0.584333, 0.449077, 1.826038, 1.259521, 0.14862, 0.082953, -0.996594, 1.247294, 1.108839, -0.302158, 0.476231, -0.514374, -1.304233, 0.96963, -0.987101, 0.533904, 0.460986, 3.044584, 1.198085, -0.411071, -0.08755, 0.735532, 1.005474, -1.030906, -0.015318, -1.687661, -1.392988, -0.542963, 0.027416, -0.404642, 0.41789, -2.059273, 0.614811, 0.087758, -1.003556, -0.001733, -2.550233, 1.109432, 0.246478, 1.240769, -2.925964, 1.967684, 0.211246, -2.131649, -0.266017, -0.028987, -0.536345, -0.564269, 1.172543, -1.791185, 0.487874, -0.333496, -0.85581, 0.882127, -0.002016, -0.019225, -1.450889, 0.996273, 0.292358, 1.24432, -0.140185, -0.469317, 0.059705, -0.488013, -0.143189, 0.522179, 1.87379, 0.465138, -1.570787, -1.013608, 0.995987, -0.047878, 0.20531, -0.092533, 0.741375, 1.18481, -0.057849, 0.489554, -0.390326, 0.202949, -1.502587, -0.626422, -0.149994, -1.739361, 2.545794, 1.873659, -0.850295, 0.027563, 0.23, -0.787961, -0.596292, 0.913601, 0.203263, 0.256244, 2.372007, -0.509645, -1.670986, 0.221057, -0.940476, 1.465228, 0.030346, 4.08819, -0.137103, 2.41954, 1.269319, 1.492317, -0.061642, 0.769041, -1.03268, -0.628912, -0.977942, -1.970134, -0.694548, -0.328433, 1.506414, 0.226462, 1.118665, 0.56786, -0.968074, 0.315545, 0.872319, 0.546341, -0.861582, 2.623806, 0.455949, -1.237845, -0.940327, 1.357167, 1.156329, 0.340076, 0.704813, -0.096103, -0.054272, 1.064137, 0.934206, 1.713232, 0.152656, 0.324615, 0.641825, 2.124987, 0.99968, -1.057513, -1.468825, -0.202909, -0.774293, 0.963528, 0.013437, 0.729009, -1.39555, 1.007735, 0.610209, -1.568323, 1.759465, -1.062856, 0.400369, -0.271973, 1.368109, -0.498986, -1.56303, -1.012164, -0.990256, 1.673839, -0.013021, -2.712145, -0.576562, 0.508659, 1.863305, 0.022916, -0.644503, -1.883187, 1.472785, 1.367068, 0.432517, 1.085982, -0.29559, -0.942534, 0.067995, 2.080676, -0.885553, -0.219158, 2.108831, 2.977797, 1.170207, -0.097423, -1.315854, -2.89502, 0.39050844, 0.34164587, -0.61333823, 0.40652877, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.6596599, 0.53413558, 0.83084697, 0.7140696, 1.4556991, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.5250583, 0.66737926, 0.79406971, 0.41757193, 1.4117703, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.6853614, 0.4349179, 0.8330881, 0.90076768, 1.3887501, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -1.4299232, -2.3649135, 1.194762, 1.8913671, 4.2606897, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.6596599, 0.53413558, 0.83084697, 0.7140696, 1.4556991, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -2.6545763, -1.0534209, 1.2383975, 2.4686222, 3.0094006, -3.6853614, 0.4349179, 0.8330881, 0.90076768, 1.3887501, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, 0.32783595, -4.3556538, 0.78248477, 0.97589046, 4.4764457, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, 3.3940694, -3.2965107, 0.91650504, 0.98627192, 4.3141031, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, 5.8387542, -1.7139858, 1.2876141, 0.060692452, 5.4078999, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.485754, 0.56071562, 0.55381167, -0.26120204, 0.90763623, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.6853614, 0.4349179, 0.8330881, 0.90076768, 1.3887501, -3.485754, 0.56071562, 0.55381167, -0.26120204, 0.90763623, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.4455891, 0.38968062, 0.50176746, -0.44516101, 0.90834165, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, 5.8387542, -1.7139858, 1.2876141, 0.060692452, 5.4078999, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, 5.8387542, -1.7139858, 1.2876141, 0.060692452, 5.4078999, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.6853614, 0.4349179, 0.8330881, 0.90076768, 1.3887501, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -1.3827212, -0.50112063, 1.6512688, 2.958221, 4.1962786, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.3191144, -0.31479901, 0.97733754, 1.1899339, 2.3978715, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.485754, 0.56071562, 0.55381167, -0.26120204, 0.90763623, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.6853614, 0.4349179, 0.8330881, 0.90076768, 1.3887501, -3.4455891, 0.38968062, 0.50176746, -0.44516101, 0.90834165, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.5250583, 0.66737926, 0.79406971, 0.41757193, 1.4117703, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, 6.085567, -3.7319129, 0.40740666, -1.1520807, 3.9753563, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, 2.4803269, -4.126616, 0.92805839, 0.57522297, 5.1222863, -3.6853614, 0.4349179, 0.8330881, 0.90076768, 1.3887501, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -2.6545763, -1.0534209, 1.2383975, 2.4686222, 3.0094006, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, 3.3940694, -3.2965107, 0.91650504, 0.98627192, 4.3141031, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.6596599, 0.53413558, 0.83084697, 0.7140696, 1.4556991, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.485754, 0.56071562, 0.55381167, -0.26120204, 0.90763623, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -2.1408484, -1.2772356, 1.2339728, 1.7501962, 3.6788094, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.3191144, -0.31479901, 0.97733754, 1.1899339, 2.3978715, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, 5.0073628, -1.3573025, 1.5510516, 0.91954297, 5.8366971, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.6596599, 0.53413558, 0.83084697, 0.7140696, 1.4556991, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, 8.4491472, -0.56892782, 0.67332405, -3.3490281, 4.2472062, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.7061553, 0.71095437, 0.61572146, -0.17221978, 0.98325163, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.485754, 0.56071562, 0.55381167, -0.26120204, 0.90763623, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.5250583, 0.66737926, 0.79406971, 0.41757193, 1.4117703, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.3191144, -0.31479901, 0.97733754, 1.1899339, 2.3978715, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.5250583, 0.66737926, 0.79406971, 0.41757193, 1.4117703, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.6853614, 0.4349179, 0.8330881, 0.90076768, 1.3887501, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.6853614, 0.4349179, 0.8330881, 0.90076768, 1.3887501, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.4455891, 0.38968062, 0.50176746, -0.44516101, 0.90834165, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.6853614, 0.4349179, 0.8330881, 0.90076768, 1.3887501, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -1.3827212, -0.50112063, 1.6512688, 2.958221, 4.1962786, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -2.9439878, 0.0076994905, 1.3462907, 2.5664592, 2.7988381, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.5250583, 0.66737926, 0.79406971, 0.41757193, 1.4117703, -3.5250583, 0.66737926, 0.79406971, 0.41757193, 1.4117703, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.5250583, 0.66737926, 0.79406971, 0.41757193, 1.4117703, -3.7061553, 0.71095437, 0.61572146, -0.17221978, 0.98325163, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -2.1408484, -1.2772356, 1.2339728, 1.7501962, 3.6788094, -3.6853614, 0.4349179, 0.8330881, 0.90076768, 1.3887501, -2.9439878, 0.0076994905, 1.3462907, 2.5664592, 2.7988381, 3.3940694, -3.2965107, 0.91650504, 0.98627192, 4.3141031, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -0.58284634, -2.5278132, 1.1789123, 2.1176322, 4.2013679, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -2.4600387, 2.9572899, 1.3668644, 0.6484865, 2.3717537, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.6853614, 0.4349179, 0.8330881, 0.90076768, 1.3887501, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.485754, 0.56071562, 0.55381167, -0.26120204, 0.90763623, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.485754, 0.56071562, 0.55381167, -0.26120204, 0.90763623, -3.485754, 0.56071562, 0.55381167, -0.26120204, 0.90763623, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.7061553, 0.71095437, 0.61572146, -0.17221978, 0.98325163, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -0.58284634, -2.5278132, 1.1789123, 2.1176322, 4.2013679, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -0.58284634, -2.5278132, 1.1789123, 2.1176322, 4.2013679, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.6853614, 0.4349179, 0.8330881, 0.90076768, 1.3887501, -0.58284634, -2.5278132, 1.1789123, 2.1176322, 4.2013679, 3.3940694, -3.2965107, 0.91650504, 0.98627192, 4.3141031, 8.4491472, -0.56892782, 0.67332405, -3.3490281, 4.2472062, -3.5454433, 0.11743279, 0.91351843, 1.1683174, 1.6948984, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, 2.4803269, -4.126616, 0.92805839, 0.57522297, 5.1222863, -4.9645972, -3.7836986, -0.84932691, 9.9191294, -10.553166, -3.0237772, -0.44269037, 1.1176183, 1.7218772, 2.6942344, -3.7061553, 0.71095437, 0.61572146, -0.17221978, 0.98325163, -1.4299232, -2.3649135, 1.194762, 1.8913671, 4.2606897, -2.1408484, -1.2772356, 1.2339728, 1.7501962, 3.6788094, -3.6853614, 0.4349179, 0.8330881, 0.90076768, 1.3887501, -3.5250583, 0.66737926, 0.79406971, 0.41757193, 1.4117703, 7.4469433, -2.7464285, 0.28793296, -3.2747052, 4.0885396, 7.8494277, -4.3806262, -1.1958225, -3.0449648, -1.3532275, -2.1408484, -1.2772356, 1.2339728, 1.7501962, 3.6788094, -1.3827212, -0.50112063, 1.6512688, 2.958221, 4.1962786, -3.5250583, 0.66737926, 0.79406971, 0.41757193, 1.4117703, -3.6596599, 0.53413558, 0.83084697, 0.7140696, 1.4556991, -3.5250583, 0.66737926, 0.79406971, 0.41757193, 1.4117703, 0.93672246, -0.068388224, 1.9976201, 3.7935312, 4.9943089, -1.4299232, -2.3649135, 1.194762, 1.8913671, 4.2606897, -2.1408484, -1.2772356, 1.2339728, 1.7501962, 3.6788094, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, 6.085567, -3.7319129, 0.40740666, -1.1520807, 3.9753563, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.2362635, 0.72524309, 0.51886451, -0.054991063, 0.54764062, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326, -3.0585434, 0.5004124, 0.37486827, -0.48779637, 0.38183326]
    # print(len(a))
    add_posi()
    # get_posi()
    #
    # posi_embedding()
    # add_posi()
    # posi_model =word2vec.Word2Vec.load_word2vec_format("./data/2/posi_embed.bin",binary=True)
    # print(posi_model[1])


    # pos_tag_add()

    # Rfiltered =nltk.pos_tag('today')
    #
    # print(Rfiltered[0][1])
    # pass
    # data_f = open('./data/4/train_data34.data', 'rb')
    # X_train,Y_train,W_train,X_test,Y_test,W_test,X_dev,Y_dev,W_dev = pickle.load(data_f)
    # data_f.close()
    #
    # for i in X_train:
    #     if len(i)>60:
    #         print(len(i))
    #
    # num=0
    # for i in range(len(Y_test)):
    #     for j in range(len(Y_test[i])):
    #         if Y_test[i][j][0]!=1.0:
    #             num+=1
    #
    # print(num)
    #
    # max_len=60
    # # X_train,Y_train,W_train=padding_mask_full(X_train,Y_train,W_train,max_len)
    # X_test,Y_test,W_test=padding_mask_full(X_test,Y_test,W_test,max_len)
    # # X_dev,Y_dev,W_dev=padding_mask_full(X_dev,Y_dev,W_dev,max_len)
    #
    # # data=X_train,Y_train,W_train,X_test,Y_test,W_test,X_dev,Y_dev,W_dev
    # # f=open(homepath+'/model/tensorflow2/data/4/train_data_len60_form34.data','wb')
    # # pickle.dump(data,f)
    # #
    # # print(np.array(X_train).shape)
    # # print(np.array(Y_train).shape)
    # # print(np.array(W_train).shape)
    # print(np.array(X_test).shape)
    # print(np.array(Y_test).shape)
    # print(np.array(W_test).shape)
    # # print(np.array(X_dev).shape)
    # # print(np.array(Y_dev).shape)
    # # print(np.array(W_dev).shape)
    #
    # num=0
    # for i in range(len(Y_test)):
    #     for j in range(len(Y_test[i])):
    #         if Y_test[i][j][0]!=1.0:
    #             num+=1
    #
    # print(num)

    # pre_data()
    # data_f = open('./data/3/train_data34.data', 'rb')
    # X_train,Y_train,W_train,X_test,Y_test,W_test,X_dev,Y_dev,W_dev = pickle.load(data_f)
    # data_f.close()
    #
    # max_len=60
    # X_train,Y_train,W_train,L_train=padding_mask_random(X_train,Y_train,W_train,max_len)
    # X_test,Y_test,W_test,L_test=padding_mask_random(X_test,Y_test,W_test,max_len)
    # X_dev,Y_dev,W_dev,L_dev=padding_mask_random(X_dev,Y_dev,W_dev,max_len)
    #
    # data=X_train,Y_train,W_train,L_train,X_test,Y_test,W_test,L_test,X_dev,Y_dev,W_dev,L_dev
    # f=open(homepath+'/model/tensorflow2/data/3/train_data_form34.data','wb')
    # pickle.dump(data,f)
    #
    # print(np.array(X_train).shape)
    # print(np.array(Y_train).shape)
    # print(np.array(W_train).shape)
    # print(np.array(X_test).shape)
    # print(np.array(Y_test).shape)
    # print(np.array(W_test).shape)
    # print(np.array(X_dev).shape)
    # print(np.array(Y_dev).shape)
    # print(np.array(W_dev).shape)
    # print(L_train)
    # print(L_test)
    # print(L_dev)






    # print(X_train[0][0])
    # print(X_train[0][1])
    # print(Y_train[0][0])
    # print(Y_train[0][1])
    # print(W_train[0][0])
    # print(W_train[0][1])

    # print(np.array(X_train).shape)
    # print(np.array(X_test).shape)
    #
    # print(W_train[0])

